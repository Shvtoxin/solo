«Grids
<! - Noresize - нужен, чтобы нельзя было изменить зааднные размеры окна-->
«Grid.ColumnDefinitions>
<ColunnDefinition />
</Grid.ColumnDefinitions>
<Grid.RomDefinitions>
«RowDefinition Height= 75'/>
«RowDefinition Height="40"/>
«RowDefinition Heighta"40"/>
<RowDefinition/>
</Grid.RomDefinitions>
«Grid Background=@" (StaticResource additional) /›
<Image Source="Resources/school_Logo.png"
Margin="10"
HorizontalAlignment="Left />
<TextBlock Grid.Row="0" Text="Great Britain"
HorizontalAlignment="Center' VerticalAlignnent="Center'
Background D*(StaticResource addional)*
FontSize=*20*
Fontweighta"Bold" />
«StackPanel Orientation="Horizontal" Grid.Rowa"1*>
<TextBlock Styles* (StaticResource Item_textblock)"
Grid.Row=*1"
ext="Логин"
Margin="20 0*
VerticalAlignnent=*Center" width=*100"/>
«TextBox :Nane="TbLogin"
Grid. Colunn="1' width="200"/>
</StackPanel»
«StackPanel Orientation="Horizontal* Grid.Row=-2">
<TextBlock Style=* (StaticResource item_textblock]"
Grid.Row=*2" Grid.Colunn="0"
Text="пароль" Margin=*20 0*
VerticalAlignnent="Center" Midth="100^/>
«PasswordBox x:Nane="TbPass" Height= 30° width= 200- />
/StackPanel »
«StackPanel Orientation="Horizontal" Grid.Row=*3" HorizontalAlignment="Center*>
«Button Width= 100" Heighte"30*
Contenterpun
*:Nane="Btnok" click="BtnokClick"/>
«Button Width="100"
Heighten3g"
Content="Отмена"
*:Nane="BtnCancel-Clicka"BtnCancelClick"/>
</StackPanel> c/Grid>








сортировка + кнопка очистить 


private void buttonSort_Click(object sender, EventArgs e)
        {
            var COL = new System.Windows.Forms.DataGridViewColumn();

            switch (comboBox1.SelectedItem.ToString())
            {
                case "Специальность":
                    COL = DoctorsDGV.Columns["DOCSPEC"];
                    break;
                case "Опыт":
                    COL = DoctorsDGV.Columns["DOCEXP"];
                    break;
                case "Имя":

                    COL = DoctorsDGV.Columns["DocName"];
                    break;
            }
            if (radioButtonUp.Checked)
            {
                DoctorsDGV.Sort(COL, System.ComponentModel.ListSortDirection.Ascending);
            }
            else
            {
                DoctorsDGV.Sort(COL, System.ComponentModel.ListSortDirection.Descending);
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            DisplayDoc(Query);
            buttonSort.Enabled = true;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            DisplayDoc(Query + " where DOCGEN=N'" + comboBox2.SelectedItem.ToString() + "'");
            buttonSort.Enabled = false;
        }


поиск 



private void textBox1_TextChanged(object sender, EventArgs e)
        {
            for (int i = 0; i < DoctorsDGV.RowCount; i++)
            {
                for (int j = 0; j < DoctorsDGV.ColumnCount; j++)
                {
                    DoctorsDGV[j, i].Style.BackColor = Color.White;
                    DoctorsDGV[j, i].Style.ForeColor = Color.Black;
                }
            }

            if (!string.IsNullOrWhiteSpace(textBox1.Text))
            {
                DoctorsDGV.ClearSelection();
                for (int i = 0; i < DoctorsDGV.RowCount - 1; i++)
                {
                    for (int j = 0; j < DoctorsDGV.ColumnCount; j++)
                    {
                        if (DoctorsDGV[j, i].Value.ToString().ToLower().Contains(textBox1.Text.ToLower()))
                        {
                            DoctorsDGV[j, i].Style.BackColor = Color.Black;
                            DoctorsDGV[j, i].Style.ForeColor = Color.White;
                        }
                    }
                }
            }
        }



ЗАПОЛНЕНИЕ DGW

private string Query = "Select * from Users"; public void DisplayUsers(string Query)
{
// получаем данные в DataSet через SqlDataAdapter
Con.Open();

SqlDataAdapter sda = new SqlDataAdapter(Query, Con);
//SqlCommandBuilder builder = new SqlCommandBuilder(sda);
//создаем объект DataSet
var ds = new DataSet();
//заполняем DataSet
sda.Fill(ds);
//отображаем данные
dataGridView1.DataSource = ds.Tables[0];
Con.Close();
}












ДОБАВЛЕНИЕ ИЗ ГЛАВНОЙ ФОРМЫ


private void Add_Click(object sender, EventArgs e)
{
var add = new Add();

if (add.ShowDialog(this) == DialogResult.OK)
{
DisplayUsers(Query);
}
}
private void добавитьToolStripMenuItem_Click(object sender, EventArgs e)
{
Add_Click(sender, e);
}













ДОБАВЛЕНИЕ ИЗ ФОРМЫ ADD


private void button1_Click(object sender, EventArgs e)
{
//проверка на пустые значения
if (textBox1.Text == "" || textBox2.Text == "" || numericUpDown1.Value == 0)
{
MessageBox.Show("Заполните все поля");
}
else
{
//отлавливаем ошибку
try
{
//открываем подключение
Con.Open();
//создаем команду для добавления
SqlCommand cmd = new SqlCommand("insert into Users(userName,userPass,userExp)values(@UN,@UP,@UE)", Con);
//добавляем значения в строку
cmd.Parameters.AddWithValue("@UN", textBox1.Text);
cmd.Parameters.AddWithValue("@UP", textBox2.Text);
cmd.Parameters.AddWithValue("@UE", numericUpDown1.Value);

cmd.ExecuteNonQuery();
// выполняет sql-выражение и возвращает количество измененных записей.
MessageBox.Show("пользователь добавлен");
//закрываем подключение
Con.Close();

Clear();


}
catch (Exception err)
{
//показываем ошибку
MessageBox.Show(err.Message);
}
}











ВЫБОР РЕДАКТИРОВАНИЕ + НАЖАТИЕ РЕДАКТИРОВАНИЯ ИЗ ГЛ.ФОРМЫ


private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
{
var edit = new Edit();
edit.textBox1.Text = dataGridView1.SelectedRows[0].Cells[1].Value.ToString();
if (edit.textBox1.Text == "")
{
изменитьToolStripMenuItem.Enabled = false;
удалитьToolStripMenuItem.Enabled = false;
}
else
{
изменитьToolStripMenuItem.Enabled = true;
удалитьToolStripMenuItem.Enabled = true;
}
}
private void Edit_Click(object sender, EventArgs e)
{
var edit = new Edit();

//заполняем данные
edit.textBox3.Text = dataGridView1.SelectedRows[0].Cells[0].Value.ToString();
edit.textBox1.Text = dataGridView1.SelectedRows[0].Cells[1].Value.ToString();
edit.textBox2.Text = dataGridView1.SelectedRows[0].Cells[3].Value.ToString();
edit.numericUpDown1.Value = Convert.ToInt32(dataGridView1.SelectedRows[0].Cells[2].Value.ToString());
if (edit.ShowDialog(this) == DialogResult.OK)
{

DisplayUsers(Query);
}
}
private void изменитьToolStripMenuItem_Click(object sender, EventArgs e)
{
Edit_Click(sender, e);
}






















РЕЛАКТИРОВАНИЕ ИЗ ФОРМЫ EDIT

private void button1_Click(object sender, EventArgs e)
{
//проверка на пустые значения
if (textBox1.Text == "")
{
MessageBox.Show("Заполните все поля");
}
else
{
//отлавливаем ошибку
try
{
//открываем подключение
Con.Open();
//создаем команду для обновления
SqlCommand cmd = new SqlCommand("Update Users set userName=@UN,userExp=@UE,userPass=@UP where userId=@DKey", Con);
//добавляем значения в строку
cmd.Parameters.AddWithValue("@UN", textBox1.Text);
cmd.Parameters.AddWithValue("@UE", numericUpDown1.Value.ToString());
cmd.Parameters.AddWithValue("@UP", textBox2.Text);
cmd.Parameters.AddWithValue("@DKey", textBox3.Text);
cmd.ExecuteNonQuery();
// выполняет sql-выражение и возвращает количество измененных записей.
MessageBox.Show("Пользователь изменен");
//закрываем подключение
Con.Close();
Clear();

}
catch (Exception err)
{
//показываем ошибку
MessageBox.Show(err.Message);
}
}










УДАЛЕНИЕ ИЗ ГЛАВНОЙ ФОРМЫ


private void удалитьToolStripMenuItem_Click(object sender, EventArgs e)
{

var id = dataGridView1.SelectedRows[0].Cells[0].Value.ToString();
//если не выбран никто
if (id == "")
{
MessageBox.Show("Выберите пользователя");
}
else
{
//отлавливаем ошибку
try
{
//открываем подключение
Con.Open();
//создаем команду для редактирования
SqlCommand cmd = new SqlCommand("Delete from Users where userId=@DKey", Con);
//добавляем значения в строку
cmd.Parameters.AddWithValue("@DKey", id);
cmd.ExecuteNonQuery();
// выполняет sql-выражение и возвращает количество измененных записей.
MessageBox.Show("Пользователь удален");
//закрываем подключение
Con.Close();
DisplayUsers(Query);
id = "";
}
catch (Exception err)
{
//показываем ошибку
MessageBox.Show(err.Message);
}
}
}










ЭКСПОРТ


private Excel.Application GetExcel()
{
Excel.Application xlApp;
Worksheet xlSheet;
xlApp = new Excel.Application();
Excel.Workbook wBook;
wBook = xlApp.Workbooks.Add();
xlApp.Columns.ColumnWidth = 15;
xlSheet = wBook.Sheets[1];
xlSheet.Name = "Пользователи";
xlSheet.Cells.HorizontalAlignment = 3;
for (int j = 1; j < dataGridView1.Columns.Count + 1; j++)
{
xlApp.Cells[1, j] = dataGridView1.Columns[j - 1].HeaderText;
}
return xlApp;
}
private void экспортToolStripMenuItem_Click(object sender, EventArgs e)
{
switch (MessageBox.Show("Экспортировать все?", "Справка", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question))
{
case DialogResult.Yes:
{
var xlApp = GetExcel();
for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
{
for (int j = 0; j < dataGridView1.Columns.Count; j++)
{
xlApp.Cells[i + 2, j + 1] = dataGridView1.Rows[i].Cells[j].Value.ToString();
}
}
xlApp.Visible = true;
break;
};

case DialogResult.No:
{
var xlApp = GetExcel();
for (int i = 0; i < dataGridView1.SelectedRows.Count - 1; i++)
{
for (int j = 0; j < dataGridView1.Columns.Count; j++)
{
xlApp.Cells[i + 2, j + 1] = dataGridView1.SelectedRows[i].Cells[j].Value.ToString();
}
}
xlApp.Visible = true;
break;
};

case DialogResult.Cancel:
return;
}
}













ЮЗИНГИ

using System.Data.SqlClient;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using Microsoft.Office.Interop.Excel;
using Excel = Microsoft.Office.Interop.Excel;


















ПОДСТАВЛЕНИЕ В ВЫПАДАЮЩИЙ СПИСОК


private void GetTestName()
//{
// Con.Open();
// string Query = "Select * from Users where TestNum=" + TestIdCb.SelectedValue.ToString() + "";
// SqlCommand cmd = new SqlCommand(Query, Con);
// DataTable dt = new DataTable();
// SqlDataAdapter sda = new SqlDataAdapter(cmd);
// sda.Fill(dt);
// foreach (DataRow dr in dt.Rows)
// {
// TestNameTb.Text = dr["TestName"].ToString();
// }
// Con.Close();
//}
//private void GetDocId()
//{
// //получаем все id
// Con.Open();
// SqlCommand cmd = new SqlCommand("Select DocId from DoctorTbl", Con);
// SqlDataReader rdr;
// // для получения строк из источника данных.
// rdr = cmd.ExecuteReader();
// DataTable dt = new DataTable();
// dt.Columns.Add("DocId", typeof(int));
// dt.Load(rdr);
// //фактическое значение
// DocIdCb.ValueMember = "DocId";
// //задаем в комбобокс
// DocIdCb.DataSource = dt;
// Con.Close();
//}
















ЛОГИН

private void button1_Click(object sender, EventArgs e)
{
if (textBox1.Text == "" || textBox2.Text == "")
{
MessageBox.Show("Введите имя и пароль");
}
else
{
Con.Open();
SqlDataAdapter sda = new SqlDataAdapter("Select Count(*) from Users where userName=N'" + textBox1.Text + "' and userPass='" + textBox2.Text + "'", Con);
DataTable dt = new DataTable();
sda.Fill(dt);
if (dt.Rows[0][0].ToString() == "1")
{
Form1 Obj = new Form1();
Obj.Show();
this.Hide();
}
else
{
MessageBox.Show("Пользователь не найден");
}
Con.Close();

}
